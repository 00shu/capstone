# -*- coding: utf-8 -*-
"""UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkZg4gYyycr3FC9xdRLIhoBooazMBL4s
"""

!pip install pygame
!pip install pydantic

import pygame
import sys
import json

# Instead of importing from world_generator
def load_world(json_file):
    with open(json_file, 'r') as f:
        data = json.load(f)
    world = {loc['name']: loc for loc in data['locations']}
    return world

# Initialize pygame
pygame.init()
screen = pygame.display.set_mode((960, 640))
pygame.display.set_caption("Ravenshade Manor - Mystery Solver")
clock = pygame.time.Clock()

# Fonts and Colors
font = pygame.font.SysFont("serif", 20)
title_font = pygame.font.SysFont("serif", 30, bold=True)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
DARKGRAY = (50, 50, 50)

# Load the world from JSON
world = load_world("world_content.json")
current_location = list(world.keys())[0]  # Start in the first location

# UI Helpers
def draw_text(surface, text, pos, font, color=WHITE):
    lines = text.split('\n')
    for i, line in enumerate(lines):
        txt_surf = font.render(line, True, color)
        surface.blit(txt_surf, (pos[0], pos[1] + i * (font.get_height() + 5)))

def draw_panel():
    pygame.draw.rect(screen, DARKGRAY, (0, 480, 960, 160))
    pygame.draw.line(screen, GRAY, (0, 480), (960, 480), 2)

# Main Game Loop
running = True
while running:
    screen.fill(BLACK)

    location = world[current_location]

    # Draw Title
    draw_text(screen, location['name'], (20, 20), title_font)

    # Draw Description
    draw_text(screen, location['visual_description'], (20, 70), font)

    # Draw NPCs
    draw_text(screen, "NPCs:", (20, 150), font)
    y_offset = 180
    for npc in location['npcs']:
        npc_info = f"- {npc['name']}: {npc['visual_description']}"
        draw_text(screen, npc_info, (40, y_offset), font)
        y_offset += 50

    # Draw Choices Panel
    draw_panel()
    draw_text(screen, "Move to:", (20, 500), font)
    for i, conn in enumerate(location['connections']):
        draw_text(screen, f"[{i+1}] {conn}", (40, 530 + i * 25), font)

    # Event Handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if pygame.K_1 <= event.key <= pygame.K_9:
                choice = event.key - pygame.K_1
                if choice < len(location['connections']):
                    current_location = location['connections'][choice]

    pygame.display.flip()
    clock.tick(30)

pygame.quit()
sys.exit()

